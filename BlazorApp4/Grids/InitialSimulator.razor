@page "/subtypesectiondynamic"
@using Telerik.Blazor.Components;
@using Telerik.DataSource;
@using System.Dynamic;
@using BlazorApp4.ServiceClients;
@inject HttpClient Http;

<style type="text/css" class="cssStyles">
    /*the following selectors target the locked/frozen columns*/
    /*===*/
    .k-grid .k-master-row.myCustomRowFormatting .k-grid-content-sticky,
    .k-grid .k-master-row.myCustomRowFormatting.k-alt .k-grid-content-sticky
    /*===*/
    /*.k-grid .k-table-row.k-table-alt-row {
            background-color: #F3F3F3 !important;
            font-weight: bold;
        }*/
    .k-grid td, .k-grid .k-table-td {
        border-block-end-width: 0px;
        white-space: unset;
        vertical-align: middle;
        font-size: 12px;
    }

    .k-grid .k-table-row.myCustomRowFormatting {
        border-inline-start-width: 0 !important;
    }

    .k-grid .k-grid-header .k-table-th {
        /* position: relative; */
        /* vertical-align: bottom; */
        vertical-align: middle;
        cursor: default;
    }

    .k-table-thead {
        font-size: 15px;
        background-color: #002C73 !important;
        color: white !important;
        font-weight: bold;
        height: 70px;
    }

    .account-special {
        background-color: steelblue;
        color: white !important;
        font-weight: bold;
    }

    .section-header {
        font-weight: bold;
        background-color: #C6C6C6 !important;
        border-right: none;
    }

    .k-section-header:hover {
        color: #002C73;
    }

    .bold-title {
    }

</style>

<PageTitle>Telerik grid Grouping</PageTitle>

<h3> Grouping & Virualization </h3>
@{
    var Hide = (new string[] { "SubTypeGroup" });
}
<TelerikGrid Data="@GridAccounts" Height="auto" Width="auto" TItem="ExpandoObject"   @ref="@GridRef"
             Groupable="true"
             Sortable="true"
             Resizable="true"
             Reorderable="true"  
             OnRowRender="@OnRowRenderHandler" OnRowCollapse="OnRowCollapseHandler" OnRowExpand="OnRowExpandHandler" 
             OnStateInit="@((GridStateEventArgs<ExpandoObject> args) => OnStateInitHandler(args))">
    @*OnStateChanged="@((GridStateEventArgs<FxOpAccount> args) => OnStateChangedHandler(args))"*@
    <GridColumns>
       @if (GridAccounts is not null && GridAccounts.Any())
        {
            var firstItem = GridAccounts.First();
            var dictionaryItem = (IDictionary<string, object>)firstItem;

            var fields = dictionaryItem.Keys;

            foreach (var item in dictionaryItem)
            {
                if (!IsColumnExistIntheHideColumnList(item.Key)) {
                     <GridColumn Field="@item.Key" FieldType="@item.Value.GetType()" Width="100px" Editable="true">
                            <GroupHeaderTemplate>
                                <span>@context.Value &nbsp;</span>
                            </GroupHeaderTemplate>
                        </GridColumn>
                    /*if (IsColumnExistIntheGroupList(item.Key))
                    {
                        <GridColumn Field="@item.Key" FieldType="@item.Value.GetType()" Visible="false" Width="100px" Editable="true">
                            <GroupHeaderTemplate>
                                <span>@context.Value &nbsp;</span>
                            </GroupHeaderTemplate>
                        </GridColumn>
                    }
                    else
                    {
                        <GridColumn Field="@item.Key" FieldType="@item.Value.GetType()" Width="100px" Editable="true">
                        </GridColumn>
                    }*/
                }
            }
        }
    </GridColumns>

</TelerikGrid>

@code {

    public TelerikGrid<ExpandoObject> GridRef { get; set; }
    bool GridGroupFlag { get; set; } = false;

    // initial state
    async Task OnStateInitHandler(GridStateEventArgs<ExpandoObject> args)
    {
        GridState<ExpandoObject> desiredState = new GridState<ExpandoObject>()
        {
            GroupDescriptors = new List<GroupDescriptor>()
            {
                    new GroupDescriptor()
                {
                    Member = "SubTypeGroup",
                    MemberType = typeof(string)
                }
            },
            CollapsedGroups = Enumerable.Range(0, GridAccounts.ToList().Count).ToList()
        };
        args.GridState = desiredState;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (GridGroupFlag)
        {
            var gridState = GridRef.GetState();
            gridState.CollapsedGroups = Enumerable.Range(0, GridAccounts.ToList().Count).ToList();
            GridGroupFlag = false;
            await GridRef.SetStateAsync(gridState);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    void OnStateChangedHandler(GridStateEventArgs<ExpandoObject> args)
    {
        if (args.PropertyName == "Page")
        {
            GridGroupFlag = true;
        }
    }


    //async void OnStateChangedHandler(GridStateEventArgs<FxOpAccount> args)
    //{
    //    if (args.PropertyName == "GroupDescriptors") // grouping changed
    //    {
    //        // ensure certain state based on some condition
    //        // in this example - ensure that the Team field is always in the grouping
    //        bool isGroupedBySubtype = false;
    //        foreach (GroupDescriptor item in args.GridState.GroupDescriptors)
    //        {
    //            if (item.Member == RowTypes.SubType)
    //            {
    //                isGroupedBySubtype = true;
    //            }
    //        }
    //        if (!isGroupedBySubtype)
    //        {
    //            //prepare the desired descriptor at the desired location (in this case, first)
    //            List<GroupDescriptor> desiredGroups = new List<GroupDescriptor>
    //            {
    //                new GroupDescriptor
    //                {
    //                    Member = RowTypes.SubType,
    //                    MemberType = typeof(string),
    //                }
    //            };

    //            //add the ones the user had (you may want to re-arrange their to suit your needs even if the user chose another field to be the first one
    //            desiredGroups.AddRange(args.GridState.GroupDescriptors);

    //            //set the new state to the grid
    //            args.GridState.GroupDescriptors = desiredGroups;
    //            await GridRef.SetStateAsync(args.GridState);
    //        }
    //    }
    //}

    public List<ExpandoObject> GridAccounts { get; set; }

    protected async override void OnInitialized()
    {
        var accounts = PlanAccounts; 
        GridAccounts = accounts.ToList();
    }

    void OnRowRenderHandler(GridRowRenderEventArgs args)
    {
        dynamic account = args.Item as ExpandoObject;

        if (account.RowType == RowTypes.Account && account.IsAccountSpecialStyle)
        {
            args.Class = "account-special";
        }
        else if (account.RowType == RowTypes.Section)
        {
            args.Class = "section-header myCustomRowFormatting";
        }
        else if (account.RowType == RowTypes.SubType)
        {
            args.Class = "collapsed";
        }
    }
    void OnRowCollapseHandler(GridRowCollapseEventArgs args)
    {
        var account = args.Item as ExpandoObject;

        //if (account.RowType == RowTypes.Account && account.IsAccountSpecialStyle)
        //{
        //    args.Class = "account-special";
        //}
        //else if (account.RowType == RowTypes.Section)
        //{
        //    args.Class = "section-header myCustomRowFormatting";
        //}
        //else if (account.RowType == RowTypes.SubType)
        //{
        //    args.Class = "collapsed";
        //}
    }
    void OnRowExpandHandler(GridRowExpandEventArgs args)
    {
        //var account = args.Item as FxOpAccount;

        //if (account.RowType == RowTypes.Account && account.IsAccountSpecialStyle)
        //{
        //    args.Class = "account-special";
        //}
        //else if (account.RowType == RowTypes.Section)
        //{
        //    args.Class = "section-header myCustomRowFormatting";
        //}
        //else if (account.RowType == RowTypes.SubType)
        //{
        //    args.Class = "collapsed";
        //}
    }

}
